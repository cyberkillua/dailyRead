// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: webpage.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createWebpage = `-- name: CreateWebpage :one
INSERT INTO webpages (id, created_at, updated_at, name, url, type)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, url, type, last_updated_at
`

type CreateWebpageParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	Type      string
}

func (q *Queries) CreateWebpage(ctx context.Context, arg CreateWebpageParams) (Webpage, error) {
	row := q.db.QueryRowContext(ctx, createWebpage,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.Type,
	)
	var i Webpage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.Type,
		&i.LastUpdatedAt,
	)
	return i, err
}

const getNextWebpageToFetch = `-- name: GetNextWebpageToFetch :many
SELECT id, created_at, updated_at, name, url, type, last_updated_at FROM webpages
ORDER BY last_updated_at ASC NULLS FIRST   
LIMIT $1
`

func (q *Queries) GetNextWebpageToFetch(ctx context.Context, limit int32) ([]Webpage, error) {
	rows, err := q.db.QueryContext(ctx, getNextWebpageToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Webpage
	for rows.Next() {
		var i Webpage
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.Type,
			&i.LastUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markWebpageAsFetched = `-- name: MarkWebpageAsFetched :one
UPDATE webpages
SET last_updated_at = Now(), 
updated_at = Now()
WHERE id = $1
RETURNING id, created_at, updated_at, name, url, type, last_updated_at
`

func (q *Queries) MarkWebpageAsFetched(ctx context.Context, id uuid.UUID) (Webpage, error) {
	row := q.db.QueryRowContext(ctx, markWebpageAsFetched, id)
	var i Webpage
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.Type,
		&i.LastUpdatedAt,
	)
	return i, err
}
